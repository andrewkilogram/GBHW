print('–£—Ä–æ–∫ 7, –∑–∞–¥–∞–Ω–∏–µ 3')
print('–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏. \n')
#–°—É–¥—è –ø–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ make_order —Å–∏–º–≤–æ–ª—ã, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏–∑ —Ä–∞–∑–±–æ—Ä–∞ –¥–∑ —ç—Ç–æ–≥–æ –Ω–µ—Ç.
class Cell:
    def __init__(self, nums):
        self.nums = nums

    def make_order(self, row):
        return '\n'.join(["üêô" * row for _ in range(self.nums // row)]) + "\n" + "üòµ" * (self.nums % row)

    def __str__(self):
        return f"{self.nums}"

    def __add__(self, other):
        print("–°–ª–æ–∂–µ–Ω–∏–µ")
        return Cell(self.nums + other.nums)

    def __sub__(self, other):
        print("–í—ã—á–∏—Ç–∞–Ω–∏–µ")
        return Cell(self.nums - other.nums) if self.nums - other.nums > 0 \
            else "–ú–µ–Ω—å—à–µ"

    def __mul__(self, other):
        print("–£–º–Ω–æ–∂–µ–Ω–∏–µ")
        return Cell(self.nums * other.nums)

    def __floordiv__(self, other):
        print("–î–µ–ª–µ–Ω–∏–µ")
        return Cell(self.nums // other.nums)

cell_1 = Cell(11)
cell_2 = Cell(12)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)